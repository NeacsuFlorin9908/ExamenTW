const Movie = require('../models/movie');
const CrewMember = require('../models/crewMember');
const { Op } = require('sequelize');

function valid(Model, payload) {
	return Object.entries(Model.tableAttributes).reduce((valid, [name, field]) => {
		if (valid && 
			!field._autoGenerated
			&& !field.primaryKey
			&& field.allowNull === false && !payload[name]) {
			valid = false;
		}
		return valid;
	}, true);
}

const getMovies = async(req,res)=>{
    try {
        const movies = await Movie.findAll({
            include: CrewMember,
        });

        return res.status(200).json(movies);
    } catch(err){
        console.log(err);
        return res.status(500).json(err);
    }
}

const addMovie = async(req,res)=>{
    try {
        if (valid(Movie, req.body) && (req.body.categorie=="Horror" || req.body.categorie=="Comedie"|| req.body.categorie=="Actiune" 
        ||req.body.categorie=="Fantasy")) {
            const newMovie = await Movie.create(req.body);
            return res.status(201).json(newMovie);
        } else {
            res.status(400).json({ error: true, message: "invalid data" });
        }
    }catch(err){
        return res.status(500).json(err);
    }
}

const deleteMovie = async (req, res) => {
    try {
        const result = await Movie.destroy({
            where:{
                id: req.params.id
            }
        });

        if (result) {
            return res.status(200).json({success: true});
        }

        return res.status(500).json({error: true, message: "Movie does not exist"});
    } catch (e) {
        console.log(e);
        return res.status(500).json({error: true, message: "deleteMovie error"});
    }
}

const updateMovie = async(req,res) => {
    try {
        const record = await Movie.findByPk(req.params.id);
        if (record) {
            await record.update(req.body);

            res.status(204).json({ success: true, message: "Movie updated" });
        } else {
            res.status(404).json({ error: true, message: "Movie not found"});
        }
    } catch(err){
        return res.status(500).json({message:"updateMovie error"});
    }
}

const searchMovie = async (req, res) => {
    try {
        const searchBy = req.query.searchTerm || '';
        const order = req.query.order || 'ASC';
        const movies = await Movie.findAll({
            where: {
                [Op.or]: [{
                    titlu: {
                        [Op.like]: `%${searchBy}%`
                    }
                }, {
                    categorie: {
                        [Op.like]: `%${searchBy}`
                    }
                }]
            },
            order: [
                ['categorie', order] // 'ASC' OR 'DESC'
            ]
        });

        return res.status(200).json(movies);
    } catch(err){
        console.log(err);
        return res.status(500).json(err);
    }
}

const getPaginatedMovies = async (req, res) => {
    try {
        const noItems = req.query.limit || 20;
        const offset = req.query.offset || 0;
        const movies = await Movie.findAndCountAll({
           offset: offset,
           limit: noItems
        });

        return res.status(200).json(movies);
    } catch(err){
        console.log(err);
        return res.status(500).json(err);
    }
}

module.exports = {
    getMovies,
    addMovie,
    deleteMovie,
    updateMovie,
    searchMovie,
    getPaginatedMovies
};